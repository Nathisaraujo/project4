<!-- form -->

<div class="col-sm-5">
                <p class="m-2 text-center">Send us your Silly Story</p>
                <form>
                  <div class="form-group">
                    <label for="formGroupExampleInput">Name</label>
                    <input type="text" class="form-control" id="formGroupExampleInput" placeholder="Name that will appear on your story">
                  </div>
                  <div class="form-group">
                    <label for="exampleFormControlInput1">Email address</label>
                    <input type="email" class="form-control" id="exampleFormControlInput1" placeholder="name@example.com">
                  </div>
                  <div class="form-group">
                    <label for="formGroupExampleInput">Title</label>
                    <input type="text" class="form-control" id="formGroupExampleInput" placeholder="What is the title of your story?">
                  </div>
                </form>
              </div>
              <div class="col-sm-5">
                <form>
                <div class="form-group textarea-margin">
                  <label for="exampleFormControlTextarea1">Your story goes here:</label>
                  <textarea class="form-control" id="exampleFormControlTextarea1" rows="3" placeholder="Tell your silly story here"></textarea>
                </div>
                <button type="submit" class="btn btn-danger">Send</button>
                </div>
              </div>
              </form>



imagens

<div class="d-none d-md-block col-md-6 masthead-image">
  <img src="{% static 'images/default.jpg' %}" class="scale" alt="placeholder">
</div>


like count
<form action="{% url 'like_post' %}" method='POST'>
  <input type="hidden" name="post_id" value="{{ obj.id }}">
  {% if user not in obj.liked.all %}
    <button class="ui button positive" type="submit">Like</button>
  {% else %}
  <button class="ui button negative" type="submit">Unlike</button>
  {% endif %}
</form>
<strong> {{ obg.liked.all.count }} Likes</strong>



<form> 
  <!-- action="{% url 'like-post' %}" method='POST'> -->
    <!-- <input type="hidden" name="post_id" value="{{ obj.id }}"> -->
    {% if user.is_authenticated %}
      <button class="btn btn-sillytalks" type="submit"><i class="fa-solid fa-thumbs-up"></i> Like</button>
    {% endif %}
    {% csrf_token %}
</form>



  <form id="likeForm" action="{% url 'like-post' %}" method='POST'>
    <input type="hidden" name="post_id" value="{{ obj.id }}">
    {% if user.is_authenticated %}
      <button class="btn btn-sillytalks" type="submit"><i class="fa-solid fa-thumbs-up"></i> Like</button>
    {% endif %}
    {% csrf_token %}
  </form>
  <!-- Display the like count -->
  <strong>{{ post.num_likes }} Likes</strong>




<!-- like thing correct -->
<form id="likeForm" action="{% url 'like-post' %}" method='POST'>
  <input type="hidden" name="post_id" value="{{ post.id }}">
  {% if user.is_authenticated %}
    <button class="btn btn-sillytalks btn-like" type="submit"><i class="fa-solid fa-thumbs-up"></i> Like</button>
  {% endif %}
  {% csrf_token %}
</form>
<div class="likeCounter" data-post-slug="{{ post.slug }}">
  <span>{{ post.like_count }}</span> Likes
</div>


<!-- like thing new problem -->
<form id="likeForm" action="{% url 'like-post' post.slug %}" method='POST'>
      {% csrf_token %}
      <button class="btn btn-sillytalks btn-like" type="submit"><i class="fa-solid fa-thumbs-up"></i> Like</button>
    </form>
    <div class="likeCounter" data-post-slug="{{ post.slug }}">
      <span>{{ post.like_count }}</span> Likes
    </div>


<!-- like button parou de funcionar -->
    {% if user.is_authenticated %}
    {% if like %}
      <p>You already liked this post</p>
    {% else %}
      <input type="hidden" name="post_id" value="{{ post.id }}">
      <button class="btn btn-sillytalks btn-like" type="submit"></i> Like this silliness!</button>
    {% endif %}
  {% else %}
    <p>Log in to like the silliness</p>
  {% csrf_token %}
  {% endif %}





  <!-- Displaying Like button -->
  <!-- <form id="likeForm" action="{% url 'like-post' post.slug %}" method='POST'>
    {% if user.is_authenticated %}
    <input type="hidden" name="post_id" value="{{ post.id }}">
    <button class="btn btn-sillytalks btn-like" type="submit"></i> Like this silliness!</button>
    {% else %}
      <p>Log in to like the silliness</p>
    {% csrf_token %}
    {% endif %}
  </form> -->


  like working

  <!-- Displaying Like button -->
  {% if user.is_authenticated %}
  <form class="d-inline" action="{% url 'post_like' post.slug %}" method="POST">
    {% csrf_token %}
    {% if liked %}
    <button type="submit" name="blogpost_id" value="{{post.slug}}" class="btn-liked"><i
      class="fas fa-solid fa-thumbs-up"></i><span class="sr-only">You have liked the
      Post!</span></button>
    {% else %}
    <button type="submit" name="blogpost_id" value="{{post.slug}}" class="btn-like"><i
      class="far fa-light fa-thumbs-up"></i><span class="sr-only">Click here to Like
      the post</span></button>
    {% endif %}
  </form>
  {% endif %}
  <div class="likeCounter col-2" data-post-slug="{{ post.slug }}">
    <i class="fa-solid fa-thumbs-up fa-2xl"></i> {{ post.like_count }}
  </div>

  <!-- displaying dilly button -->

  {% if user.is_authenticated %}
  <form class="d-inline" action="{% url 'post_silly' post.slug %}" method="POST">
    {% csrf_token %}
    {% if liked %}
    <button type="submit" name="blogpost_id" value="{{post.slug}}" class="btn-liked"><i
      class="fas fa-solid fa-thumbs-down"></i><span class="sr-only">You have liked the
      Post!</span></button>
    {% else %}
    <button type="submit" name="blogpost_id" value="{{post.slug}}" class="btn-like"><i
      class="far fa-light fa-thumbs-down"></i><span class="sr-only">Click here to Like
      the post</span></button>
    {% endif %}
  </form>
  {% endif %}
  <div class="likeCounter col-2" data-post-slug="{{ post.slug }}">
    <i class="fa-solid fa-thumbs-down fa-2xl"></i> {{ post.silly_count }}
  </div>



  seilá que merda é essa:
  # @login_required
# def profile(request):
#     if request.method == 'POST':
#         form = UserProfileForm(request.POST, instance=request.user.userprofile)
#         if form.is_valid():
#             form.save()
#             return redirect('profile')
#     else:
#         form = UserProfileForm(instance=request.user.userprofile)
#     return render(request, 'profile.html', {'form': form})


<!-- tudo relacionado ao userspostrequest aqui! -->

<!-- profiles -->

        <!-- views.py -->

        from django.shortcuts import render, get_object_or_404, redirect
        from django.contrib import messages
        from django.contrib.auth.decorators import login_required
        # from .forms import UsersPostForm 
        from .models import UserProfile
        #, UsersPostRequest
        
        # Create your views here.
        
        @login_required
        def profile(request, username):
            user_profile = get_object_or_404(UserProfile, user__username=username) # Obtenha o perfil do usuário
            # user_posts = UsersPostRequest.objects.filter(approved=True) # Obtenha todas as postagens aprovadas do usuário
            # additional information such as liked posts, commented posts, etc., here
             
            context = {
                'user_profile': user_profile,
                # 'userspost_form': UsersPostForm(),
                # 'user_posts': user_posts,
            }
            return render(request, 'profile.html', context)
        
        # def user_posts(request, username):
        #     if request.method == "POST":
        #         userspost_form = UsersPostForm(data=request.POST)
        #         if userspost_form.is_valid():
        #             users_post = userspost_form.save(commit=False)
        #             users_post.approved = False
        #             userspost_form.save()
        #             # messages.add_message(request, messages.SUCCESS, "Post received! We'll approve it with 2 days.")
        #             messages.success(request, "Post received! We'll approve it within 2 days.")
        #             return redirect('profile', username=username)
        #         else:
        #             messages.error(request, "Post submission failed. Please check your form.")
        #     else:
        #          userspost_form = UsersPostForm()
        
        #     user_profile = get_object_or_404(UserProfile, user__username=username)
        #     context = {
        #         "user_profile": user_profile,
        #         "userspost_form": userspost_form,
        #     }
        
        #     return render(request, 'profile.html',
        #         {
        #             "userspost_form": userspost_form         },
            
        #     )


        <!-- models.py -->


        from django.db import models
        from django.contrib.auth.models import User
        from blog.models import Post
        # Create your models here.
        class UserProfile(models.Model):
            user = models.OneToOneField(User, on_delete=models.CASCADE)
            bio = models.TextField(blank=True)
            picture = models.ImageField(upload_to='profile_pictures/', blank=True, null=True)
        
            def __str__(self):
                return self.user.username
        
        class UsersPostRequest(models.Model):
            author = models.ForeignKey(User, on_delete=models.CASCADE)
            title = models.CharField(max_length=100, default='Default Title') 
            content = models.TextField()
            excerpt = models.TextField(max_length=200, blank=True)
            updated_on = models.DateTimeField(auto_now_add=True)
            created_on = models.DateTimeField(auto_now_add=True)
            approved = models.BooleanField(default=False)
        
            def __str__(self):
                return f"Collaboration request from {self.author}"
        
            def to_post(self):
                """
                Método para criar um objeto Post a partir deste objeto UsersPostRequest aprovado.
                Retorna None se o UsersPostRequest não estiver aprovado.
                """
                if self.approved:
                    # Criar um novo objeto Post com base nas informações de UsersPostRequest
                    post = Post(
                        title=self.title,
                        content=self.content,
                        excerpt=self.excerpt,
                        created_on=self.created_on,
                        status=1,  # Defina o status como publicado
                        # Você pode precisar ajustar o autor dependendo da sua lógica de usuário
                        author=self.author,  # Suponho que você tenha um campo author em UsersPostRequest
                    )
                    post.save()  # Salvar o novo post no banco de dados
                    return post
                return None
                return self.user.username


        <!-- admin.py -->

        from django.contrib import admin
        from .models import UserProfile
        #, UsersPostRequest 
        
        
        # Register your models here.
        @admin.register(UserProfile)
        class UserProfileAdmin(admin.ModelAdmin):
            list_display = ['user', 'bio']
        
        # @admin.register(UsersPostRequest)
        # class UsersPostRequestAdmin(admin.ModelAdmin):
        #     list_display = ('author', 'title', 'excerpt', 'content', 'created_on',  'approved' ) 
        #     list_filter = ('approved',) 
        #     search_fields = ('name', 'title', 'message')
        #     actions = ['approve_posts']
        
        #     def approve_posts(self, request, queryset):
        #         queryset.update(approved=True)
        #         self.message_user(request, "Selected posts have been approved.")
            
        #     approve_posts.short_description = "Approve selected posts"

        <!-- forms.py -->


        from django import forms
        # from .models import UsersPostRequest
        
        # class UsersPostForm(forms.ModelForm):
        
        #     class Meta:
        #         model = UsersPostRequest
        #         fields = ('author', 'title','excerpt','content')


        <!-- template profile.html -->

        {% extends 'base.html' %}
{% block content %}
{% load static %}
{% load crispy_forms_tags %}

<main>
    <!-- Welcome message -->
    {% if user_profile.picture %}
    <img src="{{ user_profile.picture.url }}" alt="Profile Picture">
    {% endif %}
    <h1>Welcome back, {{ user.username }}!</h1>
    <p></p>

    <!-- new post -->
    <p>Send us your post</p>
    <form method="post">
        {% csrf_token %}
        <!-- {{ userspost_form | crispy }} -->
        {{ userspost_form.as_p }}
        <button type="submit">Submit Post</button>
    </form>

    {% for post in user_posts %}
    <h3>{{ post.title }}</h3>
    <p>{{ post.message }}</p>
  
    {% endfor %}

    <!-- Display user information -->
    <h2>Your personal information</h2>
    <p><strong>Username:</strong> {{ user.username }}</p>
    <p><strong>Email:</strong> {{ user.email }}</p>
    <p>Bio: {{ user_profile.bio }}</p>
    <form method="POST">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Save</button>
    </form>
    <!-- edit information -->
</main>
{% endblock content %}


    <!-- views.py do app blog -->


    from django.shortcuts import render, get_object_or_404, reverse, redirect
from django.views import generic
from django.contrib import messages
from django.http import HttpResponseRedirect
from django.http import JsonResponse
from .models import Post, Comment
# , Like
from .forms import CommentForm
from django.db.models import F
# from profiles.models import UsersPostRequest  # Importe o modelo UsersPostRequest

# from django.contrib.auth.decorators import login_required

# Create your views here.

class PostList(generic.ListView):
    queryset = Post.objects.filter(status=1)
    template_name = "blog/index.html"
    paginate_by = 3

    # user_posts = UsersPostRequest.objects.filter(approved=True)
    # for user_post in user_posts:
    #     queryset |= user_post.to_post()  # Adicione as postagens convertidas de UsersPostRequest

    

#  def get_queryset(seluk bf):
    #     # Obter os posts aprovados pelo UsersPostRequest e incluí-los no queryset
    #     user_posts = UsersPostRequest.objects.filter(approved=True)
    #     for user_post in user_posts:
    #         post = user_post.to_post()  # Assume que você tem um método to_post() em UsersPostRequest
    #         if post:
    #             self.queryset |= Post.objects.filter(id=post.id)
    #     return self.queryset
    
    

def post_detail(request, slug):
    queryset = Post.objects.filter(status=1)
    post = get_object_or_404(queryset, slug=slug)
    comments = post.comments.all().order_by("-created_on")
    comment_count = post.comments.filter(approved=True).count()
    like_count = post.like_count
    silly_count = post.like_count
    
    # like = False
    # if request.user.is_authenticated:
    #     if post.liked.filter(id=request.user.id).exists():
    #         like = True

    liked = False
    if post.liked.filter(id=request.user.id).exists():
        liked = True

    sillied = False
    if post.sillied.filter(id=request.user.id).exists():
        sillied = True
    

    if request.method == "POST":
        comment_form = CommentForm(data=request.POST)
        if comment_form.is_valid():
            comment = comment_form.save(commit=False)
            comment.author = request.user
            comment.post = post
            comment.save()
            messages.add_message(
                request, messages.SUCCESS,
                'Comment submitted and awaiting approval'
            )

    comment_form = CommentForm()

    return render(
        request,
        "blog/post_detail.html",
        {"post": post,
        "comments": comments,
        "comment_count": comment_count,
        "comment_form": comment_form,
        "liked": liked,
        "like_count": like_count,
        "sillied": sillied,
        "silly_count": silly_count,
        },
    )